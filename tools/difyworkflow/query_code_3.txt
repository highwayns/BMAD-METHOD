機能分解：各ユースケースを実装する関数/クラス/モジュールの対応は？

入出力仕様：関数/メソッドの引数型・必須/任意・デフォルト・返却型・例外は？

エラーハンドリング：ドメイン/技術例外の分類、再試行/補償、ユーザ向け/内部向けメッセージ規約は？

冪等性：API/ジョブの冪等キー、重複防止策、タイムアウト時の再実行方針は？

トランザクション：境界（開始/終了/分離レベル）、分散Txやアウトボックス/サガの実装は？

競合制御：楽観/悲観、ロック範囲、同時更新時の衝突解決は？

キャッシュ：粒度/TTL/無効化条件、整合性確保方法（write-through/behind）は？

クエリ最適化：主要SQL/ORMクエリ、インデックス設計、N+1対策、上限/ページング規約は？

シーケンス：主要シナリオの時系列（同期/非同期）、リトライ/バックオフ/CBの適用点は？

メッセージング：トピック/スキーマ/バージョン、順序保証/重複排除/DLQ、再処理手順は？

検証/整形：入力バリデーション、サニタイズ/エスケープ、i18n/ロケール/タイムゾーン扱いは？

認証/認可：ロール/スコープ判定、権限エラーのコード体系、監査ログの項目（誰が/何を/いつ）は？

ロギング/可観測性：構造化ログ項目、相関ID、メトリクス名と単位、アラート閾値/抑制条件は？

コンフィグ/FF：環境差分、秘密情報の取得元、ロールアウト/ロールバック手順は？

API詳細：リクエスト/レスポンス完全スキーマ、例示、ステータスコード/エラー本文、レート制限は？

バッチ/ジョブ：スケジュール、依存順序、部分再処理、遅延/失敗時の復旧SOPは？

データ設計詳細：DDL/制約/既定値、履歴/監査、削除方針（論理/物理）と復旧手順は？

性能基準：関数/エンドポイント別 p95/スループットの目標・測定点、負荷テスト条件は？

互換/移行：スキーマ/APIのバージョニング、非推奨化告知、データ移行スクリプトと検証は？

テスト設計：単体/結合/E2E/契約/カオスのケース一覧、カバレッジ基準、モック/シードの所在は？