構成：モノレポ/複数レポ、主要ディレクトリとサービス境界は？

技術栈：言語/FW/ランタイム/DB/メッセージング/IaC/CI/CDの実体とバージョン根拠は？

環境：dev/stg/prodの設定差分と管理方式（Feature Flag/Config）は？

依存：内部/外部依存（同期/非同期）、循環依存やホットスポットは？

アーキ：BFF/層分離/DDDの責務分担と境界づけはコード上どこで確認できる？

API：公開/内部APIの一覧（メソッド/パス/版）、入出力DTO/スキーマ、認証/認可、レート制限、エラー方針は？

ドメイン/データ：主要エンティティ・主外鍵・整合性、履歴/監査、削除（論理/物理）・復旧は？

取引/整合：トランザクション境界、イベント駆動/最終的整合の実装は？

性能：キャッシュ/インデックス/並列度、N+1/重いクエリの兆候と対策は？

可用性：ヘルス/レディネス、リトライ/バックオフ/CB、フェイルオーバ痕跡は？

セキュリティ：入力検証・出力エスケープ、CSRF/CORS/SSRＦ、権限分掌、Secrets管理の実装は？

PII：個人情報の分類/暗号/マスキング/ログ抑止の実装箇所は？

可観測性：監査ログ項目、相関ID、メトリクス/トレース、アラート閾値の定義は？

バッチ/ジョブ：スケジューラ、再実行/部分再処理、遅延・失敗検知は？

運用：デプロイ方式（Rolling/Blue-Green/Canary）、ロールバック手順、RPO/RTOに関わる実装は？

テスト：単体/結合/E2E/契約/負荷/カオスの有無と閾値、カバレッジの実測は？

品質臭：神クラス/例外握り潰し/TODO・FIXME/EoL依存はどこに？影響は？

互換：バージョニング/非推奨化/移行スクリプトの痕跡は？

コスト：外部API/クラウド資源のコストガード（レート/クォータ）実装は？

追跡：コミット/PR/Issueから要件への逆引き（トレーサビリティ）は可能か？欠落は？