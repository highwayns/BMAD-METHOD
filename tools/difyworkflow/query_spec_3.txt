目的・範囲：本詳細設計の対象/非対象、前提・制約（法規/互換/納期/予算）はどこに定義？

用語・基準：用語集/命名規約/時区間（TZ・DST）/i18n方針の規定箇所は？齟齬は？

画面仕様：画面一覧・遷移・入力制約・バリデーション・アクセシビリティ要件（WCAG等）の明記は？

UX挙動：戻る/再送防止、エラー表示、保存/下書き/自動保存の要件は？

API詳細：エンドポイント定義（メソッド/パス/版）、完全スキーマ、必須/任意、例外/エラー本文、冪等・レート制限の規定は？

外部IF：連携先・プロトコル・認証方式、タイムアウト/再試行/フォールバック/非推奨化の方針は？

業務フロー：シーケンス/状態遷移/例外分岐、タイムアウト時の処理、再実行規則は？

データ設計：概念/論理ER、主外鍵/整合制約、履歴/監査、削除（論理/物理）・復旧方針は？

PII/機微：分類・取得同意・保持期間、マスキング/暗号、第三者提供/越境可否・開示手続は？

バッチ/ジョブ：スケジュール、依存関係、部分再処理、遅延/失敗時のSOPは？

性能：SLI/SLO（p95応答/スループット/同時数）、計測点と負荷試験条件・通過基準は？

可用・信頼性：冗長化/フェイルオーバ、リトライ/バックオフ/CB、整合性モデルの規定は？

セキュリティ：認証/認可/MFA/職務分掌、入力検証・出力エスケープ、CSRF/CORS/SSRＦ、鍵/証明書/秘密管理は？

監査・可観測性：監査ログ項目（誰が/何を/いつ/結果）、相関ID、メトリクス/トレース、アラート閾値は？

運用：RPO/RTO、バックアップ/演習頻度、変更/障害/インシデント管理、当番体制と連絡系統は？

エラー体系：コード/分類、ユーザ向けと内部向けの文言規約、再試行・手動復旧の手順書は？

設定・環境差分：dev/stg/prodの差分管理、Feature Flag、設定の配布・監査は？

互換/移行：スキーマ/APIのバージョニング、非推奨化告知、データ移行スクリプト・検証基準は？

テスト設計：単体/結合/E2E/契約/性能/カオスの範囲・合格基準、テストデータ/モックの管理は？

トレーサビリティ：条項→詳細設計→REQ/NFR→受入基準の対応表は？不足・矛盾は？